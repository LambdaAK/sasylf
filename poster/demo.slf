terminals S empty fold rev
/* Natural number syntax */
syntax n ::= 0 | S n
/* Plus operation for naturals */
judgment nat-plus: n + n = n
  /* Zero is the left identity */
  --------- plus-z
  0 + n = n
  /* The top implies the bottom */
  n1 + n2 = n3
  ------------ plus-s
  S n1 + n2 = S n3

theorem zero-right-identity:
  forall n
  exists n + 0 = n
  proof by induction on n:
    case 0 is
      proof by rule plus-z
    end case
    case S n0 is
      ih: n0 + 0 = n0 by
      induction hypothesis on n0
      proof by rule plus-s on ih
    end case  
  end induction
end theorem
/* Syntax for a linked list */
syntax ll ::= empty | n :: ll
/* Judgment to add the elements */
judgment fold: fold ll = n
  /* Empty list folds to 0 */
  ---------------- fold-empty
  fold empty = 0

  /* Fold tail, then add head */
  fold ll = n2
  n1 + n2 = n3
  ---------------- fold-cons
  fold n1 :: ll = n3

judgment rev : rev ll = ll
  /* Implementation omitted */

/* Reversed list folds
   to the same thing */
theorem fold-rev:
  forall d1: fold ll1 = n1
  forall d2: rev ll1 = ll2
  exists fold ll2 = n1

  proof by induction on d1:
    /* Proof omitted */
  end induction
end theorem



