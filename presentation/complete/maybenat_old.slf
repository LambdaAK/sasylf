package presentation

module maybenat provides

terminals S None Some

syntax n ::= 0 | S n

judgment plus: n + n = n

  ------------ plus-z
  0 + n = n
  
  n1 + n2 = n3
  ------------ plus-s
  S n1 + n2 = S n3

theorem plus-comm:
  forall d: n1 + n2 = n3
  exists n2 + n1 = n3
  proof by unproved
end theorem

syntax m ::= None | Some n

judgment lifted-plus: m + m = m

  ----------------- lifted-plus-none-1
  None + m = None

  ----------------- lifted-plus-none-2
  m + None = None

  n1 + n2 = n3
  ----------------- lifted-plus-some
  Some n1 + Some n2 = Some n3

theorem lifted-plus-comm:
  forall d: m1 + m2 = m3
  exists m2 + m1 = m3
  proof by case analysis on d:
    case rule
      --------------- lifted-plus-none-1
      _: None + m2 = None
    is
      proof by rule lifted-plus-none-2
    end case

    case rule
      --------------- lifted-plus-none-2
      _: m1 + None = None
    is
      proof by rule lifted-plus-none-1
    end case

    case rule
      d1: n0 + n1 = n2
      --------------- lifted-plus-some
      _: (Some n0) + (Some n1) = (Some n2)
    is
      // first, we want to show that n1 + n0 = n2
      // from that, it follows that Some n1 + Some n0 = Some n2
      d2: n1 + n0 = n2 by theorem plus-comm on d1
      d3: Some n1 + Some n0 = Some n2 by rule lifted-plus-some on d2
      proof by d3
    end case

  end case analysis
end theorem