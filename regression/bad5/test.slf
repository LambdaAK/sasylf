package regression.bad5

module test provides

terminals S

syntax id ::= 0
syntax nonid ::= S 0 | S nonid
syntax nONE ::= id | nonid
syntax nTWO ::= nonid | id
syntax nTHREE ::= id | nonid | nonid
syntax nFOUR ::= id | id
syntax nFIVE ::= id | S 0
syntax nSIX ::= id | S nonid
syntax nSEVEN ::= id | S 0 | S nonid
syntax nEIGHT ::= nonid | S 0
syntax nNINE ::= nonid | S nonid
syntax nTEN ::= id | id | id
syntax nELEVEN ::= nonid | nonid | nonid
syntax nTWELVE ::= id | nonid | id
syntax nTHIRTEEN ::= nonid | id | nonid
syntax nFOURTEEN ::= S 0 | S nonid | S id
syntax nFIFTEEN ::= S nonid | S id | S 0
syntax nSIXTEEN ::= S id | S 0 | S nonid
syntax nSEVENTEEN ::= id | S id
syntax nEIGHTEEN ::= nonid | S id
syntax nNINETEEN ::= S 0 | S id
syntax nTWENTY ::= S nonid | S 0
syntax nTWENTYONE ::= S id | S nonid // This is valid because the sequence of nonterminals has the right structure
syntax nTWENTYTWO ::= S 0 | S nonid | S id
syntax nTWENTYTHREE ::= S nonid | S id | S 0
syntax nTWENTYFOUR ::= S id | S 0 | S nonid
syntax nTWENTYFIVE ::= id | S nonid | S 0
syntax nTWENTYSIX ::= nonid | S id | S 0
syntax nTWENTYSEVEN ::= id | S 0 | S id
syntax nTWENTYEIGHT ::= nonid | S nonid | S id
syntax nTWENTYNINE ::= id | S id | S nonid
syntax nTHIRTY ::= nonid | S 0 | S nonid



module m1 = regression.bad5.functor[id, nonid, nONE]
module m2 = regression.bad5.functor[id, nonid, nTWO] //!
module m3 = regression.bad5.functor[id, nonid, nTHREE] //!
module m4 = regression.bad5.functor[id, nonid, nFOUR] //!
module m5 = regression.bad5.functor[id, nonid, nFIVE] //!
module m6 = regression.bad5.functor[id, nonid, nSIX]
module m7 = regression.bad5.functor[id, nonid, nSEVEN] //!
module m8 = regression.bad5.functor[id, nonid, nEIGHT] //!
module m9 = regression.bad5.functor[id, nonid, nNINE] //!
module m10 = regression.bad5.functor[id, nonid, nTEN] //!
module m11 = regression.bad5.functor[id, nonid, nELEVEN] //!
module m12 = regression.bad5.functor[id, nonid, nTWELVE] //!
module m13 = regression.bad5.functor[id, nonid, nTHIRTEEN] //!
module m14 = regression.bad5.functor[id, nonid, nFOURTEEN] //!
module m15 = regression.bad5.functor[id, nonid, nFIFTEEN] //!
module m16 = regression.bad5.functor[id, nonid, nSIXTEEN] //!
module m17 = regression.bad5.functor[id, nonid, nSEVENTEEN] //!
module m18 = regression.bad5.functor[id, nonid, nEIGHTEEN] //!
module m19 = regression.bad5.functor[id, nonid, nNINETEEN] //!
module m20 = regression.bad5.functor[id, nonid, nTWENTY] //!
module m21 = regression.bad5.functor[id, nonid, nTWENTYONE]
module m22 = regression.bad5.functor[id, nonid, nTWENTYTWO] //!
module m23 = regression.bad5.functor[id, nonid, nTWENTYTHREE] //!
module m24 = regression.bad5.functor[id, nonid, nTWENTYFOUR] //!
module m25 = regression.bad5.functor[id, nonid, nTWENTYFIVE] //!
module m26 = regression.bad5.functor[id, nonid, nTWENTYSIX] //!
module m27 = regression.bad5.functor[id, nonid, nTWENTYSEVEN] //!
module m28 = regression.bad5.functor[id, nonid, nTWENTYEIGHT] //!
module m29 = regression.bad5.functor[id, nonid, nTWENTYNINE] //!
module m30 = regression.bad5.functor[id, nonid, nTHIRTY] //!


