// Edited version of poplmark-2a.slf
// testing bad "where" clauses

package examples;

terminals lambda all Top value


/************************ SYNTAX **************************************/

syntax

t ::= lambda x:T => t[x]
 | x
 | t t
 | lambda X <: T => t[X]
 | t "[" T "]" 


S, T ::= X
 | Top
 | S -> T
 | all X <: S => T[X]


Gamma ::= *
      |   Gamma, x : T
      |   Gamma, X <: T


/************************ JUDGMENTS **************************************/


judgment value: t value

----------------------- V-Abs
lambda x:T => t[x] value

-------------------------- V-Tabs
lambda X <: T => t[X] value



judgment reduce: t -> t

t1 -> t1'
------------------- E-CtxApp1
t1 t2 -> t1' t2

t1 -> t1'
------------------------------- E-CtxTapp
t1 "[" T2 "]" -> t1' "[" T2 "]"

t1 value
t2 -> t2'
------------------- E-CtxApp2
(t1 t2) -> (t1 t2')


t2 value
------------------------------------- E-AppAbs
(lambda x:S => t12[x]) t2 -> t12[t2]

------------------------------------------------ E-TappTabs
(lambda X <: S => t12[X]) "[" T2 "]" -> t12[T2]


judgment has-type: Gamma |- t : T
assumes Gamma


------------------- T-Var
Gamma, x:T |- x : T


Gamma, x:T1 |- t2[x] : T2
--------------------------------------- T-Abs
Gamma |- lambda x:T1 => t2[x] : T1 -> T2


Gamma |- t1 : T11 -> T12
Gamma |- t2 : T11
---------------------------------- T-App
Gamma |- t1 t2 : T12


Gamma, X <: T1 |- t2[X] : T2[X]
------------------------------------------------------- T-Tabs
Gamma |- lambda X <: T1 => t2[X] : all X <: T1 => T2[X]


Gamma |- t1 : all X <: T11 => T12[X]
Gamma |- T2 <: T11
----------------------------------- T-Tapp
Gamma |- t1 "[" T2 "]" : T12[T2]


Gamma |- t : S
Gamma |- S <: T
---------------- T-Sub
Gamma |- t : T



judgment subtyping: Gamma |- T <: S
assumes Gamma


----------------- SA-Top
Gamma |- T <: Top


----------------------- SA-Var
Gamma, X <: T |- X <: T


----------------------- SA-Refl
Gamma |- T <: T


Gamma |- T1 <: T2
Gamma |- T2 <: T3
----------------------- SA-Trans
Gamma |- T1 <: T3


Gamma |- T1 <: S1
Gamma |- S2 <: T2
------------------------------- SA-Arrow
Gamma |- S1 -> S2 <: T1 -> T2


Gamma |- T1 <: T1'
Gamma, X <: T1 |- T2'[X] <: T2[X]
------------------------------------------------------- SA-All
Gamma |- all X' <: T1' => T2'[X'] <: all X <: T1 => T2[X] 



/** equality judgment, used in canonical forms lemma */

judgment equality: t == t

------ equality
t == t


judgment type-equality: T == T

------ type-equality
T == T


/*
 * Inverting the subtyping of a forall type has two judgments,
 * that have different contexts, which SASyLF's "and" semantics cannot
 * handle, so we define a helper judgment:
 */
judgment Tarrow-sub: T'' == T <: T

* |- T11'' <: T11'
*, X <: T11'' |- T12'[X] <: T12[X]
---------------------------------------------------------------------------------- Tarrow-sub
(all X <: T11' => T12'[X]) == all X <: T11' => T12'[X] <: all X <: T11'' => T12[X]



/************************ THEOREMS **************************************/


/************************ PROGRESS **************************************/

/*
 * A lemma for inverting subtyping where the upper type is an arrow type.
 * We use SASyLF's "and" syntax because we have multiple results/outputs.  
 */
lemma arrow-sub-arrow: 
    forall dsub: * |- T <: T1 -> T2
	exists T == (T1' -> T2') and * |- T1 <: T1' and * |- T2' <: T2 .								

proof by induction on dsub:

case rule
	------------------- SA-Refl //! this case conceals binding of T (warning)
	d1: * |- T <: T
is
    deq: T1 -> T2 == T1 -> T2 by rule type-equality
	dsub1: * |- T1 <: T1 by rule SA-Refl
	dsub2: * |- T2 <: T2 by rule SA-Refl
	// An "and" judgment is justified by each of the pieces
	proof by deq, dsub1, dsub2
end case
	
case rule
	d1: * |- T <: T'
	d2: * |- T' <: T1 -> T2
	---------------------------- SA-Trans
	d3: * |- T <: T1 -> T2
is
	d4: T' == T21' -> T22' and 
	d5: * |- T1 <: T21' and
	d6: * |- T22' <: T2 by induction hypothesis on d2
	use inversion of rule type-equality on d4
	d8: T == T1'' -> T3 and
	d9: * |- T21' <: T1'' and
    d10: * |- T3 <: T22' by induction hypothesis on d1
    use inversion of rule type-equality on d8
    d11: T1'' -> T3 == T1'' -> T3 by rule type-equality
    d12: * |- T1 <: T1'' by rule SA-Trans on d5, d9
	d13: * |- T3 <: T2 by rule SA-Trans on d10, d6
	proof by d11,d12,d13
end case
	
case rule
	d1: * |- T1 <: T1'
	d2: * |- T2' <: T2
	----------------------------------- SA-Arrow
	d3: * |- T1' -> T2' <: T1 -> T2
is
    d0: T1' -> T2' == T1' -> T2' by rule type-equality
	proof by d0, d1, d2
end case

end induction
end lemma

lemma canonical-form-lambda : forall dtv : t value forall dtt: * |- t : T1 -> T2
						      exists t == lambda x : T1' => t'[x].
						      
use induction on dtt

proof by case analysis on dtv:
    case rule
        ----------------------------- V-Abs
        _: (lambda x : T0 => t0[x]) value
    is
        proof by rule equality
    end case

    // This case actually is a contradiction case, but this fact
    // is concealed by T-Sub
    case rule
        -------------------------------- V-Tabs
        _: (lambda X <: T0 => t0[X]) value
    is
        proof by case analysis on dtt:
            case rule
                dtt1: * |- (lambda X <: T0 => t0[X]) : T3
                dts1: * |- T3 <: (T1 -> T2)
                ---------------------------------------------- T-Sub
                _: * |- (lambda X <: T0 => t0[X]) : (T1 -> T2)
            is
                // even at this point, we don't see a contradiction
                // so we just go ahead inverting the subtyping relation and using the I.H.
                d4: T3 == T1'' -> T2' and
                d5: * |- T1 <: T1'' and
                d6: * |- T2' <: T2 by lemma arrow-sub-arrow on dts1
                use inversion of rule type-equality on d4
                // now dtt1 has the right shape for the induction hypothesis
                proof by induction hypothesis on dtv, dtt1
            end case
        // other cases don't unify with conclusion
        end case analysis
    end case

end case analysis
end lemma


lemma Tarrow-sub-Tarrow: 
    forall dsub: * |- T'' <: all X <: T11'' => T12[X]
    exists T'' == all X <: T11' => T12'[X] <: all X <: T11'' => T12[X].
    
    /* Currently in SASyLF, "and" can't be used to conjoin statements with 
     * different Gamma contexts, and so we can't use the more natural output
     * seen here:
     */
    // exists T'' == all X <: T11' => T12'[X] and * |- T11'' <: T11' and *, X <: T11'' |- T12'[X] <: T12[X].
	

deq: T'' == all X <: T11' => T12'[X] <: all X <: T11'' => T12[X] by induction on dsub:

case rule
	----------------------------------------------------------------- SA-Refl
	d1: * |- all X <: T11'' => T12[X] <: all X <: T11'' => T12[X]
       where T'' := all X <: T11'' => T22'[X] //! too specific
is
	dsub1: * |- T11'' <: T11'' by rule SA-Refl
	dsub2: *, X <: T11'' |- T12[X] <: T12[X] by rule SA-Refl
	deq: all X <: T11'' => T12[X] == all X <: T11'' => T12[X] <: all X <: T11'' => T12[X] by rule Tarrow-sub on dsub1, dsub2
end case

case rule
	d1: * |- T'' <: T2'
	d2: * |- T2' <: all X <: T11'' => T12[X]
	---------------------------------------- SA-Trans
	d3: * |- T'' <: all X <: T11'' => T12[X]
is
	d4: T2' == all X <: T21' => T22[X] <: all X <: T11'' => T12[X] by induction hypothesis on d2
	deq: T'' == all X <: T11' => T12'[X] <: all X <: T11'' => T12[X] by case analysis on d4:

	case rule
		d5: * |- T11'' <: T21'
		d6: *, X <: T11'' |- T22[X] <: T12[X]
		---------------------------------------------------------------------------------- Tarrow-sub
		d7: all X <: T21' => T22[X] == all X <: T21' => T22[X] <: all X <: T11'' => T12[X]
	       where T2' := T2'' //! where too general
	is
		d8: T'' == all X <: T11''' => T12''[X] <: all X <: T21' => T22[X] by induction hypothesis on d1
		deq: T'' == all X <: T11' => T12'[X] <: all X <: T11'' => T12[X] by case analysis on d8:

		case rule
			d9: * |- T21' <: T11'''
			d10: *, X <: T21' |- T12''[X] <: T22[X]
			------------------------------------------------------------------------------------- Tarrow-sub
			d11: all X <: T11''' => T12''[X] == all X <: T11''' => T12''[X] <: all X <: T21' => T22[X]
		is
			d12: * |- T11'' <: T11''' by rule SA-Trans on d5, d9
			xx1: *, X' <: T11'' |- X' <: T11'' by rule SA-Var
			xx2: *, X' <: T11'' |- T11'' <: T21' by weakening on d5
			xx3: *, X' <: T11'' |- X' <: T21' by rule SA-Trans on xx1, xx2
			// the following two steps replace the need for a narrowing lemma
			d10':*, X' <: T11'', X <: T21' |- T12''[X] <: T22[X] by weakening on d10
			d13: *, X <: T11'' |- T12''[X] <: T22[X] by substitution on d10', xx3
			d14: *, X <: T11'' |- T12''[X] <: T12[X] by rule SA-Trans on d13, d6
			deq: T'' == all X <: T11''' => T12''[X] <: all X <: T11'' => T12[X] by rule Tarrow-sub on d12, d14
		end case

		end case analysis
	end case

	end case analysis
end case

case rule
	d1: * |- T11'' <: T11'
	d2: *, X <: T11'' |- T12'[X] <: T12[X]
	----------------------------------------------------------------- SA-All
	d3: * |- all X <: T11' => T12'[X] <: all X <: T11'' => T12[X] 
is
	deq: T'' == all X <: T11' => T12'[X] <: all X <: T11'' => T12[X] by rule Tarrow-sub on d1, d2
end case

end induction
end lemma



lemma canonical-form-Lambda : forall dtv : t value forall dtt: * |- t : all X <: T1 => T2[X]
							  exists t == lambda X <: T1' => t2[X].

use induction on dtt

proof by case analysis on dtv:
    case rule
        -------------------------------- V-Tabs
        _: (lambda X <: T0 => t0[X]) value
	where t[X] := t0[X] //! where t doesn't need bindings
    is
        proof by rule equality
    end case

    case rule
        ----------------------------- V-Abs
        _: (lambda x : T0 => t0[x]) value
    is
        proof by case analysis on dtt:
            case rule
		         d1': * |- t : T'
		         d2': * |- T' <: all X <: T1 => T2[X]
		         ------------------------------------ T-Sub
		         d3': * |- t : all X <: T1 => T2[X]
	        is
		        d4: T' == all X <: T1'' => T2'[X] <: all X <: T1 => T2[X] by lemma Tarrow-sub-Tarrow on d2'
                proof by case analysis on d4:
                    case rule
                        _: * |- T1 <: T1''
                        _: (*, X <: T1) |- T2'[X] <: T2[X]
                        ----------------------------------- Tarrow-sub
                        _: (all X <: T1'' => T2'[X]) == (all X <: T1'' => T2'[X]) <: (all X <: T1 => T2[X])
                    is
                        proof by induction hypothesis on dtv, d1'
                    end case

                end case analysis
            end case	
	    end case analysis	
    end case
end case analysis
end lemma


theorem progress : forall dt : * |- t : T exists t value or t -> t'.

proof by induction on dt :

// variable case is impossible since Gamma must be *

case rule

	d1: *, x:T1 |- t2[x] : T2
	--------------------------------------- T-Abs
	d2: * |- lambda x:T1 => t2[x] : T1 -> T2

is
	d3 : lambda x:T1 => t2[x] value by rule V-Abs
end case


case rule

	dp1t: * |- t1 : T11 -> T12
	dp2t: * |- t2 : T11
	---------------------------------- T-App
	d3: * |- t1 t2 : T12

is

	dp1sv: t1 value or t1 -> t1' by induction hypothesis on dp1t
	dp2sv: t2 value or t2 -> t2' by induction hypothesis on dp2t
	
	proof by case analysis on dp1sv :

	case or dp1s : t1 -> t1'
	is
	
		ds : t1 t2 -> t1' t2 by rule E-CtxApp1 on dp1s
	
	end case
	case or dp1v : t1 value

	is
	
		proof by case analysis on dp2sv :
	
		case or dp2v : t2 value
		is
			deq : t1 == lambda x : T11' => t11[x] by lemma canonical-form-lambda on dp1v, dp1t

		    use inversion of rule equality on deq

		    dsteps : t1 t2 -> t11[t2] by rule E-AppAbs on dp2v
		end case
		
		case or dp2s : t2 -> t2'
		is
		
			ds : t1 t2 -> t1 t2' by rule E-CtxApp2 on dp1v, dp2s
			
		end case
		end case analysis
	end case
	end case analysis
end case

case rule

	d1: *, X <: T1 |- t2[X] : T2[X]
	------------------------------------------------------- T-Tabs
	d2: * |- lambda X <: T1 => t2[X] : all X <: T1 => T2[X]

is

	d3 : lambda X <: T1 => t2[X] value by rule V-Tabs

end case

case rule

	d1: * |- t1 : all X <: T11 => T12[X]
	d2: * |- T2 <: T11
	----------------------------------- T-Tapp
	d3: * |- t1 "[" T2 "]" : T12[T2]
is
	d1sv: t1 value or t1 -> t1' by induction hypothesis on d1
	
	proof by case analysis on d1sv :

	case or d1s : t1 -> t1' is
	
		ds : t1 "[" T2 "]" -> t1' "[" T2 "]" by rule E-CtxTapp on d1s
	
	end case
	
	case or d1v : t1 value is
	
		deq : t1 == lambda X <: T11' => t11[X] by lemma canonical-form-Lambda on d1v, d1
	
		use inversion of rule equality on deq
		
	    dsteps : t1 "[" T2 "]" -> t11[T2] by rule E-TappTabs

	end case
	end case analysis
end case


case rule
	d1: * |- t : T'
	d2: * |- T' <: T
	---------------- T-Sub
	d3: * |- t : T
is

	proof by induction hypothesis on d1

end case
end induction
end theorem




/************************ PRESERVATION **************************************/


/* Inversion of the typing relation when the type is an arrow type: */
lemma invert-lambda: forall dt: * |- lambda x:T11 => t12[x] : T1 -> T
					forall dt2: * |- t2 : T2
					forall dsub: * |- T2 <: T1
					exists * |- t12[t2] : T.

dt12: * |- t12[t2] : T by induction on dt:

case rule
	d1: *, x:T1 |- t12[x] : T
	--------------------------------------- T-Abs
	d2: * |- lambda x:T1 => t12[x] : T1 -> T
is
	dt2': * |- t2 : T1 by rule T-Sub on dt2, dsub
	dt12: * |- t12[t2] : T by substitution on d1, dt2'
end case

case rule
	d1: * |- lambda x:T11 => t12[x] : T''
	d2: * |- T'' <: T1 -> T
	----------------------------------------- T-Sub
	d3: * |- lambda x:T11 => t12[x] : T1 -> T
is
	d4: T'' == T1' -> T' and 
	d5: * |- T1 <: T1' and
	d6: * |- T' <: T by lemma arrow-sub-arrow on d2
	use inversion of rule type-equality on d4
	d8: * |- T2 <: T1' by rule SA-Trans on dsub, d5
	d9: * |- t12[t2] : T' by induction hypothesis on d1, dt2, d8
	dt12: * |- t12[t2] : T by rule T-Sub on d9, d6
end case

end induction
end lemma




/* inverting the typing relation when the type is an "all" type: */
lemma invert-lambda2: forall dt: * |- lambda X <: T11 => t12[X] : all X <: T11'' => T12[X]
					forall dsub1: * |- T2 <: T11''
					exists * |- t12[T2] : T12[T2].

dt2: * |- t12[T2] : T12[T2] by induction on dt:

case rule
	d1: *, X <: T11 |- t12[X] : T12[X]
	----------------------------------------------------------- T-Tabs
	d2: * |- lambda X <: T11 => t12[X] : all X <: T11 => T12[X]
        where T11' := T11 //! wrong name used
is
	d3: * |- t12[T2] : T12[T2] by substitution on d1, dsub1
end case


case rule
	d1: * |- lambda X <: T11 => t12[X] : T''
	d2: * |- T'' <: all X <: T11'' => T12[X]
	----------------------------------------------------------- T-Sub
	d3: * |- lambda X <: T11 => t12[X] : all X <: T11'' => T12[X]
is
	d4: T'' == all X <: T11' => T12'[X] <: all X <: T11'' => T12[X] by lemma Tarrow-sub-Tarrow on d2
	dt12: * |- t12[T2] : T12[T2] by case analysis on d4:
	case rule

		d5: * |- T11'' <: T11'
		d6: *, X <: T11'' |- T12'[X] <: T12[X]
		--------------------------------------------------------------- Tarrow-sub
		d7: all X <: T11' => T12'[X] == all X <: T11' => T12'[X] <: all X <: T11'' => T12[X]
		
	is
		d8: * |- T2 <: T11' by rule SA-Trans on dsub1, d5
		d9: * |- t12[T2] : T12'[T2] by induction hypothesis on d1, d8
		d11: * |- T12'[T2] <: T12[T2] by substitution on d6, dsub1
		dt12: * |- t12[T2] : T12[T2] by rule T-Sub on d9, d11
	end case
	end case analysis
end case

end induction
end lemma

// Just for bad68.slf
lemma subst:
    assumes Gamma
    forall dt: Gamma, x:T1 |- t2[x] : T2
    forall d1: Gamma |- t1 : T1
    exists Gamma |- t2[t1] : T2.
    proof by induction on dt:
	case rule
           --------------------------------- T-Var
           _: Gamma', x':T2, x:T1 |- x' : T2
	   where t2[x] := x' //! x' out of scope
        is
	    v: Gamma', x':T2 |- x' : T2 by rule T-Var
            proof by v
        end case

	case rule
            ----------------------- T-Var
            _: Gamma, x : T1 |- x : T1
            where t2 := x //! missing [x]
             and T2 := T1
        is
            proof by d1
        end case

	case rule
            dt': Gamma, x : T1, x' : T' |- t'[x][x'] : T3
            ------------------------------------------------------------- T-Abs
            _: Gamma, x : T1 |- (lambda x' : T' => t'[x][x']) : (T' -> T3)
            where t2[x][x'] := lambda x' : T' => t'[x][x'] //! too many
        is
            d1': Gamma, x':T' |- t1 : T1 by weakening on d1
            dt'': Gamma, x' : T', x : T1 |- t'[x][x'] : T3 by exchange on dt'
	    d': Gamma, x' : T' |- t'[t1][x'] : T3 by induction hypothesis on dt'', d1'
            proof by rule T-Abs on d'
        end case

	case rule
            dt21: Gamma, x : T1 |- t21[x] : (T22 -> T2)
            dt22: Gamma, x : T1 |- t22[x] : T22
            ---------------------------------------- T-App
            _: Gamma, x : T1 |- (t21[x] t22[x]) : T2
            where t2 := t21 t22 //! missing bindings
        is
	    dt21': Gamma |- t21[t1] : T22 -> T2 by induction hypothesis on dt21, d1
	    dt22': Gamma |- t22[t1] : T22 by induction hypothesis on dt22, d1
            proof by rule T-App on dt21', dt22'
        end case

	case rule
            dt2: Gamma, x : T1', X <: T0 |- t0[x][X] : T3[X]
            --------------------------------------------------- T-Tabs
            _: Gamma, x : T1' |- (lambda X <: T0 => t0[x][X]) : (all X <: T0 => T3[X])
	    where T1 := T1' // OK
             and T2 := all X <: T0 => T3[X]
             and t2[x] := lambda X <: T0 => t0[x][X]
             and T2 := all X <: T0 => T3[X] //!duplicate
        is
	    dt2': Gamma, X <: T0, x : T1' |- t0[x][X] : T3[X] by exchange on dt2
	    d1': Gamma, X <: T0 |- t1 : T1' by weakening on d1
            d': Gamma, X <: T0 |- t0[t1][X] : T3[X] by induction hypothesis on dt2', d1'
            proof by rule T-Tabs on d'
        end case

	case rule
            dt2: Gamma, x : T1 |- t0[x] : (all X <: T0 => T3[X])
            s: Gamma, x : T1 |- T4 <: T0
            ------------------------------------------------- T-Tapp
            _: Gamma, x : T1 |- (t0[x] "[" T4 "]") : T3[T4]
            where t2[x] := t0[x] [ T4 ] //! bad use of square brackets
        is
	    dt2': Gamma |- t0[t1] : (all X <: T0 => T3[X]) by induction hypothesis on dt2, d1
	    s': Gamma |- T4 <: T0 by substitution on s, d1
            proof by rule T-Tapp on dt2', s'
        end case

	case rule
           dt2: Gamma, x : T1 |- t2[x] : T0
           s:   Gamma, x : T1 |- T0 <: T2
           -------------------------------- T-Sub
           _:   Gamma, x : T1 |- t2[x] : T2
           where t2[x] := t2[x] //! occurs check
        is
           dt2': Gamma |- t2[t1] : T0 by induction hypothesis on dt2, d1
           s':   Gamma |- T0 <: T2 by substitution on s, d1
           proof by rule T-Sub on dt2', s' 
        end case
    end induction
end lemma

lemma subst2 :
    assumes Gamma
    forall dt: Gamma, x:T1, X <: T |- t2[x][X] : T2[X]
    forall d1: Gamma |- t1 : T1
    forall s: Gamma |- S <: T
    exists Gamma |- t2[t1][S] : T2[S].
    do case analysis on dt:
        case rule
            --------------- T-Var
            _: Gamma, x : T1, X <: T |- x : T1
	    where T2[X] := T1[X] //! T1 doesn't take parameters
        is
            proof by d1
        end case

        case rule
            --------------- T-Var
            _: Gamma', x' : T', x : T1, X <: T |- x' : T'
	    where T2[X] := T' // correct!
        is
            d': Gamma', x' : T' |- x' : T' by rule T-Var
            proof by d'
        end case

        case rule
            _: Gamma, x : T1, X <: T |- t0[x][X] : all X' <: T0[X] => T3[X][X']
            _: Gamma, x : T1, X <: T |- T5[X] <: T0[X]
            --------------------------------------------------------- T-Tapp
            _: Gamma, x : T1, X <: T |- t0[x][X] "[" T5[X] "]" : T3[X][T5[X]]
        is
            proof by unproved //! incomplete
        end case

        case rule
            dt1: Gamma, x : T1, X <: T |- t2[x][X] : T0[X]
            s1: Gamma, x : T1, X <: T |- T0[X] <: T2[X]
            ----------------------------------------------- T-Sub
            _: ((Gamma, x : T1), X <: T) |- t2[x][X] : T2[X]
        is
            dt1': Gamma |- t2[t1][S] : T0[S] by induction hypothesis on dt1, d1, s
            s': Gamma, x : T1 |- S <: T by weakening on s
            s1': Gamma, x : T1 |- T0[S] <: T2[S] by substitution on s1, s'
            s1'': Gamma |- T0[S] <: T2[S] by substitution on s1', d1
            proof by rule T-Sub on dt1',s1''
        end case

        case rule
            dt1: Gamma, x : T1, X <: T |- t0[x][X] : (T0[X] -> T2[X])
            dt2: Gamma, x : T1, X <: T |- t3[x][X] : T0[X]
            --------------------------------------------------- T-App
            _: Gamma, x : T1, X <: T |- (t0[x][X] t3[x][X]) : T2[X]
            where t2[x] := t0[x] t3[x] //! Not enough
        is
            proof by unproved //! incomplete
        end case
    end case analysis
    do case analysis on (t2[x][X] assumes Gamma, x : T1, X <: T):
        case lambda x':T'[X] => t22[x][X][x'] assumes Gamma, x: T1, X <: T is
            use inversion of rule T-Abs on dt
                where T2[X] := T0[X] -> T0[X] //! T1' is mapped away
            proof by unproved //! incomplete
        end case
        case lambda X' <: T'[X] => t22[x][X][X'] assumes Gamma, x:T1, X<:T, X'<:T'[X]//! bigger context
        is
            proof by unproved
        end case
        case lambda X' <: T'[X] => t22[x][X][X'] 
             assumes Gamma, x:T1, X<:T
        is
            use inversion of rule T-Tabs on dt
              where T2[X] := all X' <: T'[X] => T'[X] //! T'[X] already used
            proof by unproved //! incomplete
        end case
    end case analysis
    do case analysis on dt:
        case rule
            _: Gamma, x : T1, X <: T, X' <: T'[X] |- t0[x][X][X'] : T3[X][X']
            --------------- T-Tabs
            _: Gamma, x : T1, X <: T |- (lambda X' <: T'[X] => t0[x][X][X']) : (all X' <: T'[X] => T3[X][X'])
        is
           proof by unproved //! incomplete
        end case
    end case analysis
    // at this point only T-Abs is possible
    use inversion of rule T-Abs on dt
      where T2[X] := T0[X] -> T0[X] //! T0 used twice
    proof by unproved //! not complete
end lemma


theorem preservation: forall dt: * |- t : T forall ds: t -> t' exists * |- t' : T.

dt' : * |- t' : T by induction on dt:

// variable case is impossible since Gamma must be *

case rule

	d1: *, x:T1 |- t2[x] : T2
	--------------------------------------- T-Abs
	d2: * |- lambda x:T1 => t2[x] : T1 -> T2

is
	dt' : * |- t' : T by case analysis on ds:
	end case analysis
end case


case rule

	d1: * |- t1 : T1 -> T
	d2: * |- t2 : T1
	---------------------------------- T-App
	d3: * |- t1 t2 : T

is
	dt' : * |- t' : T by case analysis on ds:
	case rule
		d4: t1 -> t1'
		------------------- E-CtxApp1
		d5: t1 t2 -> t1' t2
	is
		d6: * |- t1' : T1 -> T by induction hypothesis on d1, d4
		d7: * |- t' : T by rule T-App on d6, d2
	end case
	case rule
		d4: t1 value
		d5: t2 -> t2'
		------------------- E-CtxApp2
		d6: t1 t2 -> t1 t2'
	is
		d7: * |- t2' : T1 by induction hypothesis on d2, d5
		d8: * |- t' : T by rule T-App on d1, d7
	end case
	case rule
		d4: t2 value
		------------------------------------- E-AppAbs
		d5: (lambda x:T11 => t12[x]) t2 -> t12[t2]
	is
		d6: * |- T1 <: T1 by rule SA-Refl
		d7: * |- t12[t2] : T by lemma invert-lambda on d1, d2, d6
	end case
	end case analysis
end case

case rule

	d1: *, X <: T1 |- t2[X] : T2[X]
	------------------------------------------------------- T-Tabs
	d2: * |- lambda X <: T1 => t2[X] : all X <: T1 => T2[X]

is
	dt' : * |- t' : T by contradiction on ds
end case

case rule

	d1: * |- t1 : all X <: T11'' => T12[X]
	d2: * |- T2 <: T11''
	----------------------------------- T-Tapp
	d3: * |- t1 "[" T2 "]" : T12[T2]
	
is
	dt' : * |- t' : T by case analysis on ds:
	case rule
		d4: t1 -> t1'
		----------------------------------- E-CtxTapp
		d5: t1 "[" T2 "]" -> t1' "[" T2 "]"
	is
		d6: * |- t1' : all X <: T11'' => T12[X] by induction hypothesis on d1, d4
		d7: * |- t' : T by rule T-Tapp on d6, d2
	end case

	case rule

		----------------------------------------------------- E-TappTabs
		d5: (lambda X <: T11 => t12[X]) "[" T2 "]" -> t12[T2]

	is
		d7: * |- t12[T2] : T12[T2] by lemma invert-lambda2 on d1, d2
	end case
	end case analysis
end case

case rule
	d1: * |- t : T'
	d2: * |- T' <: T
	---------------- T-Sub
	d3: * |- t : T
is

	dtT' : * |- t' : T' by induction hypothesis on d1, ds
	dt' : * |- t' : T by rule T-Sub on dtT', d2

end case
end induction
end theorem

