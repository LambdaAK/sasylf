// Many syntax errors
package regression;

terminals fn A in

syntax
  t ::= fn x => t[x]
     | t t
     | x
     
  T ::= A
     | T -> T
  
  U, U ::= <> //! duplicate
     | {x} T[x] //! subordination error

  Gamma ::= *
         | Gamma, x : T

  (+ T) := A -> T
  (- T) := (+ T) -> A
  
  (2 T) := T -> T // should be allowed
 
  (* T) := (* T) -> A //! circular sugar not allowed
  
  (/ t[x]) := t[fn x => x] //! x unbound
  
  (^ T[A]) := T[A] //! A is not legal as an argument
  
  (% x in t[x]) := A //! t is unused
  
  (# x in t[x]) := t[fn x => x] // OK
  
  (???) := x //! x is not doing anything
  
  (?!?) := T //! T out of nowhere
  
  (! x in t[x]) := t //! inconsistent bindings
  
  (!! t) := fn x => t[x] //! inconsistent binding
  
  (t1 *in* x:t2[x]) := t2[t1] // OK
  
  (! x, x' in t[x][x']) := t[fn x => x] //! inconsistent # of bindings
  
  (& x in T[x]) := T[fn x => x] //! T does not depend on x
  
  (--x) := A->A //! x unbound in LHS
  
  (***) := -> //! "->" doesn't mean anything
  
  (? x, x' in t[x][x']) := fn x => fn x' => t[x][x']
  
  (%% x in t[x][x]) := fn x => t[x][x] //! var occurs twice
  
  (t % t) := t t //! NT occurs twice in LHS
  
judgment isvar : t:T in Gamma
assumes Gamma

  ---------------------- var
   x:T in (Gamma, x:T)

judgment typing: Gamma |- t : T
assumes Gamma

  t:T in Gamma
  --------------- T-Var
  Gamma |- t : T
  
  Gamma, x:T |- t[x] : T' 
  ---------------- T-Abs
  Gamma |- fn x => t[x] : T -> T'
  
  Gamma |- t1 : T -> T'
  Gamma |- t2 : T
  ------------------------- T-App
  Gamma |- t1 t2 : T'

syntax
  (Gamma ⊢ t : T) := Gamma |- t : T //! not allowed (yet?)
  
  A ::= 0 | 1 //! A is already a terminal
  
  T ::= t //! redeclaration of T
  
  e ::= y  //! too many variables, and not bound in context
     | z 
     | e + e 
     | ∀ y • e[y] 
     | ∃ z • e[z]
     
  s ::= t = e 
     | skip //! nonterminal
     | ? xx = e in s[xx] //! xx never bound 
     
   ee ::= 0 //! x never assigned
       | x 
       | ee * ee
       
judgment funny: ? T[ee] //! needs to be a variable

