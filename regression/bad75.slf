package regression;

terminals fn A in

syntax
  t ::= fn x => t[x]
     | t t
     | x
     
  T ::= A
     | T -> T
  

  Gamma ::= *
         | Gamma, x : T

  (+ T) := A -> T
  (- T) := (+ T) -> A
  
  (* T) := (* T) -> A //! circular sugar not allowed
  
judgment isvar : t:T in Gamma
assumes Gamma

  ---------------------- var
   x:T in (Gamma, x:T)

judgment typing: Gamma |- t : T
assumes Gamma

  t:T in Gamma
  --------------- T-Var
  Gamma |- t : T
  
  Gamma, x:T |- t[x] : T' 
  ---------------- T-Abs
  Gamma |- fn x => t[x] : T -> T'
  
  Gamma |- t1 : T -> T'
  Gamma |- t2 : T
  ------------------------- T-App
  Gamma |- t1 t2 : T'

syntax
  (Gamma ‚ä¢ t : T) := Gamma |- t : T //! not allowed (yet?)