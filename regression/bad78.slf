// testing assumptions and and/or
package regression;

terminals unit Unit All lambda fold unfold Rec in let

syntax
  t ::= lambda x:T . t[x]
     | t t
     | fold T t
     | unfold T t
     | x
     | unit
     | let f < z < f in t[z] 
     
  T ::= Unit
     | T -> T
     | Rec X . T[X]
     | X
     
   f ::= z
      | f / 2
      | 1
      | f * f
      
  Gamma ::= * | Gamma, x:T | Gamma, f < z < f
  
  Sigma ::= * 
         | Sigma, X 
         | Sigma, z = f //! bound again
     

judgment bad1: 1 Gamma |- t : T
assumes T //! T is not in context

judgment bad2: 2 Gamma |- t : T //! assumes missing

judgment bad3: 3 Gamma |- t : T
assumes Sigma //! wrong context NT

judgment bad4: 4 Gamma |- t : T
assumes Gama //! undeclared

judgment isvar: t:T in Gamma
assumes Gamma

  ------------------- varV
  x:X in (Gamma, x:X) //! context changed
  
  ---------------------------- var2
  x':T' in (Gamma, x':T', x:T) //! two levels of syntax

  -------------------------- var3
  x':T1 in (Gamma, x:T1->T2) //! context changed
  
  -------------------- var4
  t:T in (Gamma, x:T) //! t is undefined
  
  ------------------- var //! duplicate (var4 grabbed the assumption)
  x:T in (Gamma, x:T)
  
judgment typing: Gamma |- t : T
assumes Gamma

  ------------------ T-Var //! Multiple uses
  Gamma, x:T |- x:T
  
  ------------------ T-Unit
  Gamma |- unit:Unit
  
judgment frac1: Gamma |- f < f
assumes Gamma

  ------------------------- fracvar
  Gamma, f < z < f |- z < f //! duplicate f
   
judgment well-formed: Sigma |- T
assumes Sigma

   ------------- W-Unit
   Sigma |- Unit

   Sigma |- T1
   Sigma |- T2
   ---------------- W-Arrow
   Sigma |- T1 -> T2
   
judgment frac1: f => f //! already declared

  ------ frac-const
  1 => 1
   
lemma test-unassumed:
    forall d: Sigma, X |- T[X] //! Sigma,X has no rule
    exists Sigma, X |- T[X] -> Unit
    du: Sigma |- Unit by rule W-Unit
    proof by rule W-Arrow on d, du
end lemma

lemma test-two-assume: //! two contexts
    assumes Gamma
    forall s1: Sigma |- T
    forall s2: Gamma |- f < f
    exists Sigma |- T
    proof by s1
end lemma

lemma test-terminal:
    assumes Sigma
    forall unit //! a terminal
    exists Sigma |- Unit
    proof by rule W-Unit
end lemma

lemma testorcontext:
    assumes Gamma
    forall d1: Gamma |- f < 1 or Sigma |- T //! different contexts
    exists Sigma |- Unit
    proof by rule W-Unit
end lemma

lemma test-andorparse:
    assumes Gamma
    forall d1: Gamma |- f < 1
    exists Gamma |- f < 1 and Gamma |- t : Unit or Gamma |- t : Unit -> Unit //! ambiguous
    proof by unproved
end lemma

lemma test-ornot:
    assumes Gamma
    forall d1: Gamma |- f < 1
    exists Gamma |- f < 1 or not f => 1 //! "not" not supported
    proof by unproved
end lemma

lemma orsyntax:
    forall d: Gamma |- f < 1 or f/2 //! or syntax
    exists  Sigma |- Unit
    proof by rule W-Unit
end lemma

lemma andprefix:
    forall d: Gamma |- t : T
    exists Gamma |- t : T and * |- unit : Unit //! no prefix
    u: * |- unit : Unit by rule T-Unit
    proof by d,u
end lemma

lemma orresult:
    assumes Gamma
    forall d: Gamma |- t : T
    exists t:T in Gamma or unit:Unit in Gamma
    u: * |- unit : Unit by rule T-Unit
    proof by u //! none match
end lemma
    
lemma useor:
    assumes Gamma
    forall d:Gamma |- t : T
    exists t:T in Gamma
    ch: t:T in Gamma or unit:Unit in Gamma by lemma orresult on d
    proof by ch //! squeeze one out
end lemma

lemma andresult:
    assumes Gamma
    forall d: Gamma |- t : T
    exists t:T in Gamma and Gamma |- t t : T
    proof by d //! too feq
    proof by d,d,d //! too many
end lemma

lemma normalresult:
    assumes Gamma
    forall d: Gamma |- t : T
    exists Gamma |- t t : T -> T
    u: Gamma |- unit : Unit by rule T-Unit
    proof by d, u //! unexpected multiple clauses
end lemma

lemma assumesyntax:
    forall t assumes unit //! "unit" is not a context
    exists 1 => 1
    proof by rule frac-const
end lemma