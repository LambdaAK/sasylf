// test uses of modules
package regression;

terminals S true

module Bool = org.sasylf.util.Bool //! wrong name

module Nat = org.sasylf.util.Natural

syntax
  n = Nat.n ::= 0 | S n
  
  u = U.Unit ::= 1 //! No such module
  
  v = Nat.notequal ::= <> //! a judgment, not a syntax
  
  w = n.b ::= * //! "n" is not a module
  
  t = regression.bad83.t ::= 8 3 //! bad83 has parse errors, cannot be used

  e ::= x | n | e + e
  
  s ::= true | ∀ x . s[x]
  
  Γ ::= * | Γ, x
  
judgment not-equal = Nat.ne : n <> n //! wrong name in Nat

  
judgment notequal = Natural.notequal : n != n //! package not imported

judgment noteq = Nat.n : n /= n //! not a judgment

judgment badmatch = Nat.notequal : n + n = n //! doesn't match

judgment badassume = Nat.notequal : n =/= n //! assumes wrong
assumes Γ

judgment badrename = Nat.notequal : n /=/ n //! don't rename rules

  ------- not-equal
  n /=/ n

judgment noteq = Nat.notequal : n !=! n

lemma innocuous:
    forall d: n1 !=! n2
    exists n2 !=! n1
    do case analysis on d:
        case rule
            d1: n1' !=! n2'
            --------------- Nat.ne-rec //! no qual needed
            _: (S n1') !=! (S n2')
            where n1 := S n1' and n2 := S n2'
        is
            d1': n2' !=! n1' by lemma innocuous on d1 //! implicit induction
            proof by lemma Nat.ne-rec on d1' //! wrong kind
        end case

    end case analysis
    proof by theorem Nat.ne-symmetric on d
end lemma

judgment taut: !

      --------- taut
         !
         
module Parm = regression.bad64[taut] //! parameters not supported yet

// theorem ...

