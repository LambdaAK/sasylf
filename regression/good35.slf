// "or" with "and" pieces not working in SASyLF 1.3.4a2 and earlier.
// The "and" judgments in "case or" are ignored, and one is
// not able to construct proof of the "and" part of the "or".
// Added ability to ceate and-judgments on teh fly with parentheses.
package regression;

terminals S 


syntax
  n ::= 0
     | S n


judgment eq: n = n

  ------ eq
  n = n

judgment gt: n > n

  ------- gt-1
  S n > n

  n1 > n2
  --------- gt-s
  S n1 > n2

theorem test1:
    forall n
    exists (n = S n' and n > 0) or n = 0.
    proof by induction on n:
        case 0 is
            _: 0 = 0 by rule eq
        end case

        case S n' is
            eq: n = S n' by rule eq
            o: (n' = S n'' and n' > 0) or n' = 0 by induction hypothesis on n'
            g: n > 0 by case analysis on o:
                case or eq': (n' = (S n'')) and g': (n' > 0) is
                    _: S n' > 0 by rule gt-s on g' 
                end case

                case or eq': n' = 0 is
                    use inversion of eq on eq'
                    proof by rule gt-1
                end case

            end case analysis
            proof by eq, g
            _: n = S n' and _: n > 0 by eq,g
        end case

    end induction
end theorem

theorem test2: // same as test1 except for newlines in exists
    forall n
    exists (n = S n' and n > 0) or 
            n = 0.
    proof by induction on n:
        case 0 is
            _: 0 = 0 by rule eq
        end case

        case S n' is
            eq: n = S n' by rule eq
            o: (n' = S n'' and n' > 0) or n' = 0 by induction hypothesis on n'
            g: n > 0 by case analysis on o:
                case or eq': (n' = (S n'')) and g': (n' > 0) is
                    _: S n' > 0 by rule gt-s on g' 
                end case

                case or eq': n' = 0 is
                    use inversion of eq on eq'
                    proof by rule gt-1
                end case

            end case analysis
            proof by eq, g
            _: n = S n' and _: n > 0 by eq,g
        end case

    end induction
end theorem

theorem test3: // same as test1,test2 except for newlines in exists
    forall n
    exists (n = S n' and n > 0) 
       or  n = 0.
    proof by induction on n:
        case 0 is
            _: 0 = 0 by rule eq
        end case

        case S n' is
            eq: n = S n' by rule eq
            o: (n' = S n'' and n' > 0) or n' = 0 by induction hypothesis on n'
            g: n > 0 by case analysis on o:
                case or eq': (n' = (S n'')) and g': (n' > 0) is
                    _: S n' > 0 by rule gt-s on g' 
                end case

                case or eq': n' = 0 is
                    use inversion of eq on eq'
                    proof by rule gt-1
                end case

            end case analysis
            proof by eq, g
            _: n = S n' and _: n > 0 by eq,g
        end case

    end induction
end theorem

theorem positive-gt-zero:
    forall n
    exists S n > 0.
    proof by induction on n:
        case 0 is
	    proof by rule gt-1
	end case
	case S n' is
	    g: S n' > 0 by induction hypothesis on n'
	    proof by rule gt-s on g
	end case
    end induction
end theorem

theorem test4:
    forall n1
    forall n2
    exists ((n1 = S n1' and n1 > 0) or n1 = 0) and
           ((n2 = S n2' and n2 > 0) or n2 = 0).
    proof by case analysis on n1:
        case 0 is
	   eq1: n1 = 0 by rule eq
	    proof by case analysis on n2:
	        case 0 is
		     eq2: n2 = 0 by rule eq
		     proof by eq1, eq2
		 end case
		 case S n2' is
		     eq2: n2 = S n2' by rule eq
		     gt: n2 > 0 by theorem positive-gt-zero on n2'
		     proof by eq1, (eq2, gt)
		 end case
	    end case analysis
	end case
	case S n1' is
	    eq1: n1 = S n1' by rule eq
	    gt1: n1 > 0 by theorem positive-gt-zero on n1'
	    proof by case analysis on n2:
		case 0 is
		    eq2: n2 = 0 by rule eq
		    proof by (eq1, gt1), eq2
		end case
		case S n2' is
		    eq2: n2 = S n2' by rule eq
		    gt2: n2 > 0 by theorem positive-gt-zero on n2'
		    proof by (eq1, gt1), (eq2, gt2)
		end case
	    end case analysis
	end case
    end case analysis
end theorem

	    
		 

