package regression;

terminals fn A in

syntax
  t ::= fn x => t[x]
     | t t
     | x
     
  T ::= A
     | T -> T
  

  Gamma ::= *
         | Gamma, x : T

judgment isvar : t:T in Gamma
assumes Gamma

  ---------------------- var
   x:T in (Gamma, x:T)

judgment typing: Gamma |- t : T
assumes Gamma

  t:T in Gamma
  --------------- T-Var
  Gamma |- t : T
  
  Gamma, x:T |- t[x] : T' 
  ---------------- T-Abs
  Gamma |- fn x => t[x] : T -> T'
  
  Gamma |- t1 : T -> T'
  Gamma |- t2 : T
  ------------------------- T-App
  Gamma |- t1 t2 : T'

lemma simple-poly:
    exists *, x:A |- t[x] : A and *, x:A->A |- t[x] : A->A and * |- t' : A -> A
    v1: x:A in (*, x:A) by rule var
    v2: x:A->A in (*, x:A->A) by rule var
    t1: *, x:A |- x:A by rule T-Var on v1
    t2: *, x:A->A |- x:A->A by rule T-Var on v2
    t3: * |- fn x => x : A -> A by rule T-Abs on t1
    proof by t1, t2, t3
end lemma

lemma use-poly:
    exists *, x:A |- t[x] : A
    d1: *, x:A |- t[x] : A and 
    d2: *, x:A->A |- t[x] : A->A and 
    d3: * |- t' : A -> A by lemma simple-poly
    proof by d1
end lemma

lemma choice:
    assumes Gamma
    forall d: Gamma, x:T |- t[x] : T'
    exists Gamma, x:A |- t[x] : T' or Gamma, x:T1 -> T2 |- t[x] : T'
    proof by case analysis on T:
        case A is
            _: Gamma, x:A |- t[x] : T' by d // should accept!
        end case

        case T1 -> T2 is
            proof by d // should accept!
        end case
    end case analysis
end lemma

lemma use-choice:
    exists *, x:A |- x:A
    v: x:A in (*, x:A) by rule var
    d: *, x:A |- x:A by rule T-Var on v // yes, I know, this is our goal.  Ignore.
    ch: *, x:A |- x:A or *, x:T1 -> T2 |- x : A by lemma choice on d
    proof by case analysis on ch:
        case or d': *, x:A |- x:A is
            proof by d'
        end case
        case or d'': *, x:T1 -> T2 |- x:A is
            proof by case analysis on d'':
                case rule
                    v': x : A in (*, x : (T1 -> T2))
                    -------------------------------- T-Var
                    _: *, x : (T1 -> T2) |- x : A
                is
                    proof by contradiction on v'
                end case
            end case analysis
        end case
    end case analysis
end lemma
    
