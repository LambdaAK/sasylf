package regression;

terminals fn A in

syntax
  t ::= fn x => t[x]
     | t t
     | x
     
  T ::= A
     | T -> T
  

  Gamma ::= *
         | Gamma, x : T

judgment isvar : t:T in Gamma
assumes Gamma

  ---------------------- var
   x:T in (Gamma, x:T)

judgment typing: Gamma |- t : T
assumes Gamma

  t:T in Gamma
  --------------- T-Var
  Gamma |- t : T
  
  Gamma, x:T |- t[x] : T' 
  ---------------- T-Abs
  Gamma |- fn x => t[x] : T -> T'
  
  Gamma |- t1 : T -> T'
  Gamma |- t2 : T
  ------------------------- T-App
  Gamma |- t1 t2 : T'

lemma simple-poly:
    exists *, x:A |- t[x] : A and *, x:A->A |- t[x] : A->A and * |- t' : A -> A
    v1: x:A in (*, x:A) by rule var
    v2: x:A->A in (*, x:A->A) by rule var
    t1: *, x:A |- x:A by rule T-Var on v1
    t2: *, x:A->A |- x:A->A by rule T-Var on v2
    t3: * |- fn x => x : A -> A by rule T-Abs on t1
    proof by t1, t2, t3
end lemma

