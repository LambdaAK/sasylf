package regression.modulebad01

module demo provides

terminals T F

syntax z ::= 0

judgment add: z + z = z

  --------- addrule
  z + z = z

judgment four-args: z + z + z = z

  ------------- fourargsrule
  z + z + z = z

theorem add-thm:
  forall z
  exists z + z = z
  proof by rule addrule
end theorem

syntax boolid ::= T
syntax boolnonid ::= F
syntax bool ::= boolid | boolnonid | boolnonid

syntax b ::= T | F

judgment lor : b \/ b = b

  --------- lorrule1
  T \/ b = T

  --------- lorrule2
  F \/ b = b

judgment land : b /\ b = b

  --------- landrule1
  T /\ b = b

  --------- landrule2
  F /\ b = F

judgment funny : b + b = b

  b1 /\ b2 = b3
  b1 \/ b2 = b3
  --------- funny1
  b1 + b2 = b3


syntax x ::= T
syntax y ::= F
syntax zz ::= x | x



module m1 = regression.modulebad01.functor[zz]

// this should fail because we cannot pass a CompUnit as a module
// should throw MOD_ARG_INVALID

/*
This should fail because we cannot pass a CompUnit as input to a module

throws MOD_ARG_INVALID

*/
module m2 = regression.modulebad01.functor[m1] //!

/*
  This should fail because functor expects a syntax as input, but
  we are passing a judgment instead.

  throws MOD_ARG_TYPE_MISMATCH
*/
module m3 = regression.modulebad01.functor[add] //!

/*
  This should fail because functor expects a syntax as input, but
  we are passing a theorem instead

  throws MOD_ARG_TYPE_MISMATCH
*/
module m4 = regression.modulebad01.functor[add-thm] //!

/*
  This should fail because functortwo expects bool to have 2 productions,
  but bool has 3 productions

  throws MOD_ARG_SYNTAX_WRONG_NUM_PRODUCTIONS
*/
module m5 = regression.modulebad01.functortwo[boolid, boolnonid, bool] //!

/*
  This should fail because the functor expects land before lor.

  throws MOD_ARG_MISMATCH_JUDGMENT

*/
module m6 = regression.modulebad01.functorthree[b, lor, land, funny] //!


/*
  This should fail because the functor expects the third argument to
  be the union of the first two arguments.

  However, zz is zz ::= x | x, not x | y

  throws MOD_ARG_MISMATCH_SYNTAX
*/
module m7 = regression.modulebad01.functorfour[x, y, zz] //!


/*
  This should fail because functorfive expects the second argument
  to be a judgment with 3 not-terminals in its form

  However, four-args has 4 not-terminals in its form

  throws MOD_ARG_JUDGMENT_WRONG_NUM_NOT_TERMINALS

  invalid module argument. The number of elements in the parameter clause does not match the number of elements in the argument clause.
  Parameter clause has 3 elements, and argument clause has 4 elements.

*/
module m8 = regression.modulebad01.functorfive[z, four-args] //!