package regression.modulegood08f

module vectorspace

requires

abstract syntax addid // additive identity element of the field
abstract syntax mulid // multiplicative identity element of the field

abstract syntax nonid // all other elements of the field

syntax f ::= !addid | !!mulid | !!!nonid

abstract syntax vid
abstract syntax vnonid
syntax v ::= !vid | !!vnonid

abstract judgment add: f + f = f // addition operation for the field

abstract theorem add-total:
  forall f1
  forall f2
  exists f1 + f2 = f3
end theorem

abstract theorem add-commutative:
  forall d1: f1 + f2 = f3
  exists f2 + f1 = f3
end theorem

abstract theorem add-associative:
  forall d1: f1 + f2 = f3
  forall d2: f3 + f4 = f5
  forall d3: f2 + f4 = f6
  exists f1 + f6 = f5
end theorem

abstract theorem add-identity:
  forall f1
  exists f1 + !addid = f1 // f2 is the additive identity
end theorem

abstract theorem add-inverse:
  forall f1
  exists f1 + f2 = !addid // f2 is the additive inverse of f1
end theorem

abstract judgment mul: f * f = f // multiplication operation for the field

abstract theorem mul-total:
  forall f1
  forall f2
  exists f1 * f2 = f3
end theorem

abstract theorem mul-commutative:
  forall d1: f1 * f2 = f3
  exists f2 * f1 = f3
end theorem

abstract theorem mul-associative:
  forall d1: f1 * f2 = f3
  forall d2: f3 * f4 = f5
  forall d3: f2 * f4 = f6
  exists f1 * f6 = f5
end theorem

abstract theorem mul-identity:
  forall f1
  exists f1 * !!mulid = f1 // f2 is the multiplicative identity
end theorem

abstract theorem mul-inverse:
  forall f1
  exists f1 * f2 = !!mulid // f2 is the multiplicative inverse of f1
end theorem

abstract theorem distributivity:

  // f1 * (f2 + f3) = f1 * f2 + f1 * f3

  forall d1: f2 + f3 = f4
  forall d2: f1 * f4 = f5 // f5 is the value of the LHS
  forall d3: f1 * f2 = f6
  forall d4: f1 * f3 = f7
  exists f6 + f7 = f5

end theorem


abstract judgment vector-add: v + v = v // addition operation for the vector space

abstract theorem vector-add-total:
  forall v1
  forall v2
  exists v1 + v2 = v3
end theorem

abstract theorem vector-add-commutative:
  forall d1: v1 + v2 = v3
  exists v2 + v1 = v3
end theorem

abstract theorem vector-add-associative:
  forall d1: v1 + v2 = v3
  forall d2: v3 + v4 = v5
  forall d3: v2 + v4 = v6
  exists v1 + v6 = v5
end theorem

abstract theorem vector-add-identity:
  forall v1
  exists v1 + !vid = v1
end theorem

abstract theorem vector-add-inverse:
  forall v1
  exists v1 + v2 = !vid
end theorem

abstract judgment scalar-mul: f * v = v


abstract theorem scalar-mul-total:
  forall f1
  forall v1
  exists f1 * v1 = v2
end theorem

abstract theorem scalar-mul-associative:
  // (f1 * f2) * v1 = f1 * (f2 * v1)
  forall d1: f1 * f2 = f3
  forall d2: f2 * v1 = v2
  forall d3: f1 * v2 = v4
  exists f3 * v1 = v4
end theorem



provides

theorem scalar-mul-distributivity:
  // f1 * (v1 + v2) = f1 * v1 + f1 * v2

  forall d1: v1 + v2 = v3
  forall d2: f1 * v3 = v4 // v4 is the value of the LHS
  forall d3: f1 * v1 = v5
  forall d4: f1 * v2 = v6
  exists v5 + v6 = v4


  // use the distributivity of the field for this





  proof by unproved


end theorem


