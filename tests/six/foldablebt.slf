package tests.six

module foldablebt

requires

abstract syntax id
abstract syntax nonid
syntax e ::= !id | !nonid
abstract judgment combine: e + e = e

provides

terminals Leaf Node

syntax bt ::= Leaf | Node bt e bt

judgment fold: bt --> e

  --------------- fold-leaf
  Leaf --> !id

  bt1 --> e1
  bt2 --> e2
  e1 + e = e3
  e3 + e2 = e4
  --------------- fold-Node
  Node bt1 e bt2 --> e4

theorem fold-leaf-theorem:
  exists Leaf --> !id
  proof by rule fold-leaf
end theorem